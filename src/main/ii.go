package main

import (
	"sort"
        "strings"
        "strconv"
        "unicode"
        "fmt"
        "mapreduce"
        "os"
)


// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
  f := func(x rune) bool{
                 return !unicode.IsLetter(x)
         }
         words := strings.FieldsFunc(value, f)
         var rest []mapreduce.KeyValue
         for _, word := range words{
                 rest = append(rest, mapreduce.KeyValue{word,document})
         }
         return rest

	// Your code here (Part V).
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
/*
 fileName := make(map[string]bool)

    for _, value := range values{
        fileName[value] = true
    }

    num := 0
    var documents []string
    for key := range fileName{
        num += 1
        documents = append(documents, key)
    }
    sort.Strings(documents)
    
    var result string
    for i, file := range documents{
        if i >= 1{
            result += ","
        }
        result += file
    }
    return strconv.Itoa(num) + " " + result
*/
  fileName := make(map[string]bool)
 
         for _,value := range values{
                 fileName[value]=true;
         }
         num := 0
         var words []string
         for key := range fileName{
                 num+=1
                 words = append(words, key)
         }
         sort.Strings(words)
         var res string
         for i, files := range words{
                 if i>=1 {
                         res +=","
                 }
                 res += files
         }
         return strconv.Itoa(num)+" "+res
 
	// Your code here (Part V).
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
